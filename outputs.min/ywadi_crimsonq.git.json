{
  "results": {
    "dockerfile": {
      "exist": true,
      "count": 1,
      "rootCount": 1,
      "subFolderCount": 0,
      "filepaths": [
        "crimsonq.git/dockerfile"
      ]
    },
    "composefile": {
      "exist": true,
      "count": 1,
      "rootCount": 1,
      "subFolderCount": 0,
      "filepaths": [
        "crimsonq.git/docker-compose.yml"
      ]
    },
    "devcontainer": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "kustomize": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "helm": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "k8s": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "backstage": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "terraform": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    }
  },
  "info": {
    "id": 454586713,
    "name": "crimsonq",
    "full_name": "ywadi/crimsonq",
    "owner": {
      "login": "ywadi",
      "html_url": "https://github.com/ywadi",
      "type": "User"
    },
    "html_url": "https://github.com/ywadi/crimsonq",
    "description": "One Message to Multi Consumer Queue with persistence and Queue Stages. Crimson Queue allows you to have multiple consumers listening on topics and receive a copy of a message that targets its topic providing multiple consumers for a queue message and complex message routing. Utilizes the same methodology as MQTT topic routing but with queue stages and persistence.,",
    "url": "https://api.github.com/repos/ywadi/crimsonq",
    "clone_url": "https://github.com/ywadi/crimsonq.git",
    "homepage": "",
    "size": 160798,
    "stargazers_count": 11,
    "watchers_count": 11,
    "language": "Go"
  }
}