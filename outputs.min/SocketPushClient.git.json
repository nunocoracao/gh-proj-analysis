{
  "results": {
    "dockerfile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "composefile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "devcontainer": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "kustomize": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "helm": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "k8s": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "backstage": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "terraform": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    }
  },
  "info": {
    "id": 86546448,
    "name": "SocketPushClient",
    "full_name": "HouBin506/SocketPushClient",
    "owner": {
      "login": "HouBin506",
      "html_url": "https://github.com/HouBin506",
      "type": "User"
    },
    "html_url": "https://github.com/HouBin506/SocketPushClient",
    "description": "最近项目中要求做推送，基于内网的。由于工期不是很紧，需求不是很严格，所以放弃了使用三方的推送框架，基于Socket自己写了消息推送功能（服务端+android端）。服务器端使用java，客户端使用Android。本人是做Android开发的，所以demo重点介绍客户端的一些代码，包括Socket的TCP长连接及发消息，Service如何不被轻易杀死，通过aidl实现界面实时与Service的通信，可以在界面上控制Socket的连接与断开以及发消息，并采用了Parcelable对象实现aidl传参",
    "url": "https://api.github.com/repos/HouBin506/SocketPushClient",
    "clone_url": "https://github.com/HouBin506/SocketPushClient.git",
    "homepage": null,
    "size": 104,
    "stargazers_count": 139,
    "watchers_count": 139,
    "language": "Java"
  }
}