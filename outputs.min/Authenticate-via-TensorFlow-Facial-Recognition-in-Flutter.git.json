{
  "results": {
    "dockerfile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "composefile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "devcontainer": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "kustomize": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "helm": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "k8s": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "backstage": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "terraform": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    }
  },
  "info": {
    "id": 384474162,
    "name": "Authenticate-via-TensorFlow-Facial-Recognition-in-Flutter",
    "full_name": "The-Assembly/Authenticate-via-TensorFlow-Facial-Recognition-in-Flutter",
    "owner": {
      "login": "The-Assembly",
      "html_url": "https://github.com/The-Assembly",
      "type": "User"
    },
    "html_url": "https://github.com/The-Assembly/Authenticate-via-TensorFlow-Facial-Recognition-in-Flutter",
    "description": "The power of machine learning allows us to change long-standing computing paradigms. One of these is the age-old password-based authentication system common to most apps. With fast real-time facial recognition, we can easily dispense with text-based verification and allow users to log in just by showing their faces to a webcam.  In this session, we’ll show how to do this in Flutter, Google’s popular open-source UI toolkit for developing apps for web, Android, iOS, Fuchsia, and many other platforms with a single codebase. We’ll first build a simple authentication-based Android app, and then deploy the Firebase ML Vision model for face ID & image processing; as well as the MobileFaceNet CNN model through TensorFlow Lite for structured verification. Once all these parts are in place, our solution will work seamlessly and can easily be ported to other apps.  Pre-requisites: ✅ Android Studio (https://developer.android.com/studio) — you can also use other IDEs/platforms if you’d rather not use Android - Flutter documentation below guides on the same.  ✅ Flutter SDK (https://flutter.dev/docs/get-started/install)  -----------------------------------------  To learn more about The Assembly’s workshops, visit our website, social media or email us at workshops@theassembly.ae  Our website: http://theassembly.ae Instagram: http://instagram.com/makesmartthings Facebook: http://fb.com/makesmartthings Twitter: http://twitter.com/makesmartthings  #TensorFlow #Flutter #MachineLearning",
    "url": "https://api.github.com/repos/The-Assembly/Authenticate-via-TensorFlow-Facial-Recognition-in-Flutter",
    "clone_url": "https://github.com/The-Assembly/Authenticate-via-TensorFlow-Facial-Recognition-in-Flutter.git",
    "homepage": null,
    "size": 4783,
    "stargazers_count": 19,
    "watchers_count": 19,
    "language": "Dart"
  }
}