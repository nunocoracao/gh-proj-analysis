{
  "results": {
    "dockerfile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "composefile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "devcontainer": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "kustomize": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "helm": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "k8s": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "backstage": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "terraform": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    }
  },
  "info": {
    "id": 51912349,
    "name": "service-fabric-pub-sub",
    "full_name": "SoCreate/service-fabric-pub-sub",
    "owner": {
      "login": "SoCreate",
      "html_url": "https://github.com/SoCreate",
      "type": "Organization"
    },
    "html_url": "https://github.com/SoCreate/service-fabric-pub-sub",
    "description": "Do you want to create an Event Driven Architecture while using Azure Service Fabric? Do you need to reliably broadcast messages between Actors and Services? This code will help you do that. It supports both Actors and Services as publishers and subscribers.",
    "url": "https://api.github.com/repos/SoCreate/service-fabric-pub-sub",
    "clone_url": "https://github.com/SoCreate/service-fabric-pub-sub.git",
    "homepage": "",
    "size": 15907,
    "stargazers_count": 138,
    "watchers_count": 138,
    "language": "C#"
  }
}