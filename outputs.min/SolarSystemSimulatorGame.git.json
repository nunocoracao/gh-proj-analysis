{
  "results": {
    "dockerfile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "composefile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "devcontainer": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "kustomize": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "helm": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "k8s": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "backstage": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "terraform": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    }
  },
  "info": {
    "id": 36626838,
    "name": "SolarSystemSimulatorGame",
    "full_name": "sotos82/SolarSystemSimulatorGame",
    "owner": {
      "login": "sotos82",
      "html_url": "https://github.com/sotos82",
      "type": "User"
    },
    "html_url": "https://github.com/sotos82/SolarSystemSimulatorGame",
    "description": "A simulation of our Solar System and a game at the same time made mainly for educational purposes (it gives a good sense of the time and space scale of out Solar System). The planets the moon and the Space Crafts follow realistic (elliptical) orbits in phase space and the relative sizes of planets and moon are correct. For the orbital elements of the planets I used values according to the NASA planetary fact sheet. The radius of all planets and moon is increased by a factor of 30 to avoid floating point errors since the GPU internally is using single precision arithmetics. The planetary orbits are pre-computed at start time using a 4rth-order Runge-Kutta integrator. Specifically the 2nd Kepler-law (which is a differential equation) is solved for the values according to the Nasa Fact-Sheet for the planets of our solar system and the moon.   The trajectories of the Space-Crafts are calculated at run time using a 2nd order Leapfrog Integrator with initial conditions based on user input and Earth's position and velocity at the time the Space Craft is launched.   The goal of the game is to launch Space Crafts and complete the missions. Check out the video in the right for gameplay footage.   Note that in order to play the game you need a mouse with a wheel.   Programmed with C# and powered by Unity. ",
    "url": "https://api.github.com/repos/sotos82/SolarSystemSimulatorGame",
    "clone_url": "https://github.com/sotos82/SolarSystemSimulatorGame.git",
    "homepage": "https://www.youtube.com/watch?v=1qL-AhrCbQ8",
    "size": 9913,
    "stargazers_count": 115,
    "watchers_count": 115,
    "language": "C#"
  }
}