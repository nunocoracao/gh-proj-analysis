{
  "results": {
    "dockerfile": {
      "exist": true,
      "count": 2,
      "rootCount": 0,
      "subFolderCount": 2,
      "filepaths": [
        "streaming-at-scale.git/components/apache-flink/kubernetes/docker/flink-job/Dockerfile",
        "streaming-at-scale.git/components/apache-flink/kubernetes/docker/flink-service-port-patcher/Dockerfile"
      ]
    },
    "composefile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "devcontainer": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "kustomize": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "helm": {
      "exist": true,
      "count": 2,
      "rootCount": 0,
      "subFolderCount": 2,
      "filepaths": [
        "streaming-at-scale.git/components/apache-flink/kubernetes/helm/flink-standalone/Chart.yaml",
        "streaming-at-scale.git/components/azure-kubernetes-service/helm/strimzi-kafka-cluster/Chart.yaml"
      ]
    },
    "k8s": {
      "exist": true,
      "count": 5,
      "rootCount": 0,
      "subFolderCount": 5,
      "filepaths": [
        "streaming-at-scale.git/components/apache-flink/kubernetes/helm/flink-standalone/templates/configmap-flink.yaml",
        "streaming-at-scale.git/components/apache-flink/kubernetes/helm/flink-standalone/templates/deployment-jobmanager.yaml",
        "streaming-at-scale.git/components/apache-flink/kubernetes/helm/flink-standalone/templates/deployment-taskmanager.yaml",
        "streaming-at-scale.git/components/apache-flink/kubernetes/helm/flink-standalone/templates/service-jobmanager.yaml",
        "streaming-at-scale.git/components/apache-flink/kubernetes/helm/flink-standalone/templates/serviceaccount-service-port-patcher.yaml"
      ]
    },
    "backstage": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "terraform": {
      "exist": true,
      "count": 26,
      "rootCount": 0,
      "subFolderCount": 26,
      "filepaths": [
        "streaming-at-scale.git/components/terraform/application_insights/main.tf",
        "streaming-at-scale.git/components/terraform/application_insights/outputs.tf",
        "streaming-at-scale.git/components/terraform/application_insights/variables.tf",
        "streaming-at-scale.git/components/terraform/digital_twins/main.tf",
        "streaming-at-scale.git/components/terraform/digital_twins/outputs.tf",
        "streaming-at-scale.git/components/terraform/digital_twins/variables.tf",
        "streaming-at-scale.git/components/terraform/eventhubs/main.tf",
        "streaming-at-scale.git/components/terraform/eventhubs/outputs.tf",
        "streaming-at-scale.git/components/terraform/eventhubs/variables.tf",
        "streaming-at-scale.git/components/terraform/function/main.tf",
        "streaming-at-scale.git/components/terraform/function/outputs.tf",
        "streaming-at-scale.git/components/terraform/function/variables.tf",
        "streaming-at-scale.git/components/terraform/iothub/main.tf",
        "streaming-at-scale.git/components/terraform/iothub/outputs.tf",
        "streaming-at-scale.git/components/terraform/iothub/variables.tf",
        "streaming-at-scale.git/components/terraform/time_series_insights/main.tf",
        "streaming-at-scale.git/components/terraform/time_series_insights/outputs.tf",
        "streaming-at-scale.git/components/terraform/time_series_insights/variables.tf",
        "streaming-at-scale.git/iothub-digitaltwins-timeseriesinsights/property-updates/main.tf",
        "streaming-at-scale.git/iothub-digitaltwins-timeseriesinsights/property-updates/outputs.tf",
        "streaming-at-scale.git/iothub-digitaltwins-timeseriesinsights/property-updates/providers.tf",
        "streaming-at-scale.git/iothub-digitaltwins-timeseriesinsights/property-updates/variables.tf",
        "streaming-at-scale.git/iothub-digitaltwins-timeseriesinsights/telemetry-events/main.tf",
        "streaming-at-scale.git/iothub-digitaltwins-timeseriesinsights/telemetry-events/outputs.tf",
        "streaming-at-scale.git/iothub-digitaltwins-timeseriesinsights/telemetry-events/providers.tf",
        "streaming-at-scale.git/iothub-digitaltwins-timeseriesinsights/telemetry-events/variables.tf"
      ]
    }
  },
  "info": {
    "id": 149493091,
    "name": "streaming-at-scale",
    "full_name": "Azure-Samples/streaming-at-scale",
    "owner": {
      "login": "Azure-Samples",
      "html_url": "https://github.com/Azure-Samples",
      "type": "Organization"
    },
    "html_url": "https://github.com/Azure-Samples/streaming-at-scale",
    "description": "How to implement a streaming at scale solution in Azure",
    "url": "https://api.github.com/repos/Azure-Samples/streaming-at-scale",
    "clone_url": "https://github.com/Azure-Samples/streaming-at-scale.git",
    "homepage": null,
    "size": 24531,
    "stargazers_count": 212,
    "watchers_count": 212,
    "language": "C#"
  }
}