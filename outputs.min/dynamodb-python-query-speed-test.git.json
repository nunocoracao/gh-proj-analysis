{
  "results": {
    "dockerfile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "composefile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "devcontainer": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "kustomize": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "helm": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "k8s": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "backstage": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "terraform": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    }
  },
  "info": {
    "id": 166118547,
    "name": "dynamodb-python-query-speed-test",
    "full_name": "matwerber1/dynamodb-python-query-speed-test",
    "owner": {
      "login": "matwerber1",
      "html_url": "https://github.com/matwerber1",
      "type": "User"
    },
    "html_url": "https://github.com/matwerber1/dynamodb-python-query-speed-test",
    "description": "In this post, we demonstrate how Amazon DynamoDB table structure can affect scan performance and offer techniques for optimizing table scan times.",
    "url": "https://api.github.com/repos/matwerber1/dynamodb-python-query-speed-test",
    "clone_url": "https://github.com/matwerber1/dynamodb-python-query-speed-test.git",
    "homepage": "https://aws.amazon.com/blogs/database/optimizing-amazon-dynamodb-scan-latency-through-schema-design/",
    "size": 39,
    "stargazers_count": 4,
    "watchers_count": 4,
    "language": "Python"
  }
}