{
  "results": {
    "dockerfile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "composefile": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "devcontainer": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "kustomize": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "helm": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "k8s": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "backstage": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    },
    "terraform": {
      "exist": false,
      "count": 0,
      "rootCount": 0,
      "subFolderCount": 0,
      "filepaths": []
    }
  },
  "info": {
    "id": 139324441,
    "name": "ArchitectingWithGCP_Fundamentals_Course2_EssentialCloudInfrastructureFoundation",
    "full_name": "kjy/ArchitectingWithGCP_Fundamentals_Course2_EssentialCloudInfrastructureFoundation",
    "owner": {
      "login": "kjy",
      "html_url": "https://github.com/kjy",
      "type": "User"
    },
    "html_url": "https://github.com/kjy/ArchitectingWithGCP_Fundamentals_Course2_EssentialCloudInfrastructureFoundation",
    "description": "Console and Cloud Shell.   Access Google Cloud Platform. Create a Cloud Storage Bucket using the GCP console and Cloud Shell.  Understand shell features.    Infrastructure Preview.   Use Cloud Launcher to build a Jenkins Continuous integration environment.  Manage the service from the Jenkins UI.  Administer the service from the Virtual Machine host through SSH.   Virtual Networking.   Understand network layout and placing instances in various locations and establish communications between virtual machines. Create an auto-mode network, a custom-mode network, and associated subnetworks.  Compare connectivity in the various types of networks.  Create routes and firewall rules using IP addresses and tags to enable connectivity.  Convert an auto-mode network to a custom-mode network.  Create, expand, and delete subnetworks.    Bastion Host.   Create an application web server to represent a service provided to an internal corporate audience.  Prevent the web server from access to or from the internet.  Create a maintenance server, called a Bastion Host, to gain access to and verify internal connectivity to the application server.   Virtual Machines.   Create a utility virtual machine for administration purposes, a standard VM and a custom VM.  Launch both Windows and Linux VMs and deleted VMs.   Working with Virtual Machines.  Create a customized virtual machine instance, using an n1-standard-1 machine type that includes a 10 GB boot disk, 1 virtual CPU (vCPU), and 3.75 GB of RAM. Machine type runs Debian Linux by default.  Install base software (a headless JRE) and an application software (a Minecraft game server).  Attach a high-performance 50-GB persistent solid-state drive (SSD) to the instance.  Minecraft server can support up to 50 players.   Reserve a static external IP so the address would remain consistent.  Verified availability of the gaming server online. Set up a backup system to back up the serverâ€™s data to a Cloud Storage bucket and test the backup system.  Automate backups using cron.  Set up maintenance scripts using metadata for graceful startup and shutdown of the server. ",
    "url": "https://api.github.com/repos/kjy/ArchitectingWithGCP_Fundamentals_Course2_EssentialCloudInfrastructureFoundation",
    "clone_url": "https://github.com/kjy/ArchitectingWithGCP_Fundamentals_Course2_EssentialCloudInfrastructureFoundation.git",
    "homepage": null,
    "size": 21842,
    "stargazers_count": 4,
    "watchers_count": 4,
    "language": null
  }
}